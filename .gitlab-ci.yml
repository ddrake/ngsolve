stages:
  - build
  - test
  - timings
  - cleanup
  - deploy

############################################
# Windows
############################################

.template_win: &win
  tags:
    - windows
    - x64
  before_script:
    - set CI_DIR=C:\ci\%CI_PIPELINE_ID%
    - call tests\gitlab-ci\win\set_vars.bat

win_build:
  <<: *win
  stage: build
  script:
    - call tests\gitlab-ci\win\build.bat
    - cd %CI_PROJECT_DIR%
    - call tests\gitlab-ci\win\upload.bat

win_test:
  <<: *win
  stage: test
  script:
    - call tests\gitlab-ci\win\test.bat

win_cleanup:
  <<: *win
  stage: cleanup
  script:
    - call tests\gitlab-ci\win\cleanup.bat
  when: always
  allow_failure: true

.template_win_avx: &win_avx
  tags:
    - windows
    - x64
  before_script:
    - set CI_DIR=C:\ci\%CI_PIPELINE_ID%_avx
    - set CMAKE_CONFIG=-DCMAKE_CXX_FLAGS="/W0 /EHsc /arch:AVX -DWIN32=1"
    - call tests\gitlab-ci\win\set_vars.bat

win_avx_build:
  <<: *win_avx
  stage: build
  script:
    - call tests\gitlab-ci\win\build.bat

win_avx_test:
  <<: *win_avx
  stage: test
  script:
    - call tests\gitlab-ci\win\test.bat

win_avx_cleanup:
  <<: *win_avx
  stage: cleanup
  script:
    - call tests\gitlab-ci\win\cleanup.bat
  when: always
  allow_failure: true

############################################
# Linux
############################################
.template_ubuntu: &ubuntu
  tags:
    - linux
    - docker
    - avx

.template_ubuntu_1604: &ubuntu_1604
  <<: *ubuntu
  variables:
    IMAGE_VERSION: "16.04"
    UBUNTU_VERSION: "16.04"
    UBUNTU_VERSION_NAME: "xenial"

.template_ubuntu_1710: &ubuntu_1710
  <<: *ubuntu
  variables:
    IMAGE_VERSION: "17.10"
    UBUNTU_VERSION: "17.10"
    UBUNTU_VERSION_NAME: "artful"

.template_ubuntu_avx: &ubuntu_avx
  <<: *ubuntu
  variables:
    IMAGE_VERSION: "avx"
    UBUNTU_VERSION: "17.10"
    UBUNTU_VERSION_NAME: "artful"

.template_ubuntu_avx512: &ubuntu_avx512
  tags:
    - docker
    - avx512
  variables:
    IMAGE_VERSION: "avx512"
    UBUNTU_VERSION: "17.10"
    UBUNTU_VERSION_NAME: "artful"

.template_ubuntu_debug: &ubuntu_debug
  <<: *ubuntu
  variables:
    IMAGE_VERSION: "debug"
    UBUNTU_VERSION: "17.10"
    UBUNTU_VERSION_NAME: "artful"

.template_build_linux: &build_linux
  stage: build
  script:
    - source tests/gitlab-ci/ubuntu/build.sh

ubuntu_1604_build:
  <<: *ubuntu_1604
  <<: *build_linux

ubuntu_1710_build:
  <<: *ubuntu_1710
  <<: *build_linux

ubuntu_avx_build:
  <<: *ubuntu_avx
  <<: *build_linux

ubuntu_avx512_build:
  <<: *ubuntu_avx512
  <<: *build_linux

ubuntu_debug_build:
  <<: *ubuntu_debug
  <<: *build_linux

.template_test_linux: &test_linux
  stage: test
  script:
    - source tests/gitlab-ci/ubuntu/test.sh

ubuntu_1604_test:
  <<: *ubuntu_1604
  <<: *test_linux

ubuntu_1710_test:
  <<: *ubuntu_1710
  <<: *test_linux

ubuntu_avx_test:
  <<: *ubuntu_avx
  <<: *test_linux

ubuntu_avx512_test:
  <<: *ubuntu_avx512
  <<: *test_linux

debug_test:
  <<: *ubuntu_debug
  <<: *test_linux
  allow_failure: true

linux_cleanup:
  stage: cleanup
  tags:
    - linux
    - docker
    - avx
  script:
    - source tests/gitlab-ci/ubuntu/cleanup.sh
  when: always
  allow_failure: true

linux_cleanup_avx512:
  stage: cleanup
  tags:
    - docker
    - avx512
  script:
    - source tests/gitlab-ci/ubuntu/cleanup.sh
  when: always
  allow_failure: true

############################################
# MacOSX
############################################

.template_mac: &mac
  tags:
    - mac
  before_script:
    - source tests/gitlab-ci/mac/set_vars.sh

mac_build:
  <<: *mac
  stage: build
  script:
    - source $CI_PROJECT_DIR/tests/gitlab-ci/mac/build.sh
    - source $CI_PROJECT_DIR/tests/gitlab-ci/mac/upload.sh

mac_test:
  <<: *mac
  stage: test
  script:
    - source tests/gitlab-ci/mac/test.sh

mac_cleanup:
  <<: *mac
  stage: cleanup
  script:
    - source tests/gitlab-ci/mac/cleanup.sh
  when: always
  allow_failure: true


############################################
# Timings stage
############################################

.t_clang: &t_clang
  variables:
    CMAKE_C_COMPILER: "clang"
    CMAKE_CXX_COMPILER: "clang++"

.t_gcc7: &t_gcc7
  variables:
    CMAKE_C_COMPILER: "gcc-7"
    CMAKE_CXX_COMPILER: "g++-7"

.t_gcc6: &t_gcc6
  variables:
    CMAKE_C_COMPILER: "gcc-6"
    CMAKE_CXX_COMPILER: "g++-6"

.t_gcc5: &t_gcc5
  variables:
    CMAKE_C_COMPILER: "gcc-5"
    CMAKE_CXX_COMPILER: "g++-5"

.t_omit_frame_pointer: &t_omit_frame_pointer
  before_script:
    - export CMAKE_FLAGS="-fomit-frame-pointer"

.t_timings: &t_timings
  allow_failure: true
  stage: timings
  tags:
    - linux
    - avx2
  only:
    - triggers
  script:
    - git submodule update --init --recursive
    - mkdir build
    - mkdir install
    - cd build
    - >-
        cmake ..
        -DUSE_CCACHE=ON
        -DCMAKE_INSTALL_PREFIX=$CI_PROJECT_DIR/install
        -DUSE_NATIVE_ARCH=ON
        -DCMAKE_C_COMPILER=$CMAKE_C_COMPILER
        -DCMAKE_CXX_COMPILER=$CMAKE_CXX_COMPILER
        -DCMAKE_CXX_FLAGS="-ffast-math $CMAKE_FLAGS"
        -DUSE_MKL=ON
        -DMKL_ROOT=/opt/intel/mkl
        -DCMAKE_BUILD_TYPE=Release
    - make -j install
    - export NETGENDIR=$CI_PROJECT_DIR/install/bin
    - export PATH=$CI_PROJECT_DIR/install/bin:$PATH
    - export PYTHONPATH=$CI_PROJECT_DIR/install/lib/python3.6/site-packages:.
    - export LD_LIBRARY_PATH=$CI_PROJECT_DIR/install/lib:.:$LD_LIBRARY_PATH
    - cd ngsolve
    - if [ -n "${RUN_TIMINGS}" ]; then make timings; fi

  artifacts:
    paths:
      - build/ngsolve/tests/timings/results.json

gcc5_timings:
  <<: *t_gcc5
  <<: *t_timings

gcc6_timings:
  <<: *t_gcc6
  <<: *t_timings

gcc7_timings:
  <<: *t_gcc7
  <<: *t_timings

clang_timings:
  <<: *t_clang
  <<: *t_timings

clang_no_fp_timings:
  <<: *t_omit_frame_pointer
  <<: *t_clang
  <<: *t_timings

############################################
# Deploy stage
############################################

deploy_github:
  stage: deploy
  tags:
    - linux
    - docker
  script:
    - git remote add github git@github.com:NGSolve/ngsolve.git || true
    - git remote update
    - git checkout master
    - git pull origin master
    - git push github master
  only:
    - master

deploy_release:
  stage: deploy
  tags:
    - linux
    - docker
  script:
    - /home/gitlab-runner/deploy/deploy_release.sh $CI_PIPELINE_ID $CI_BUILD_TAG
    - source tests/gitlab-ci/deploy/release.sh
  only:
    - tags
  environment: deploy_release

deploy_nightly:
  stage: deploy
  tags:
    - linux
    - docker
  script:
    - source tests/gitlab-ci/deploy/nightly.sh
  only:
    - triggers
  except:
    - tags
  environment: deploy_nigthly
